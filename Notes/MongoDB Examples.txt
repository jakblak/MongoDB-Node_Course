alt + spacebar - e/p to paste to command


Write the JSON for a simple document containing a single key "fruit" that has as its value an array containing three strings: "apple", "pear", and "peach"
A: {fruit:["apple", "pear", "peach"]}


Write a JSON document with a single key, "address" that has as it value another document with the keys “street_address”, “city”, “state”, “zipcode”, with the following values: “street_address” is "23 Elm Drive", “city” is "Palo Alto", “state” is "California", “zipcode” is "94305"
A: {'address':{"street_address":"23 Elm Drive","city":"Palo Alto","state":"California","zipcode":"94305"}}


Use findOne on the collection users to find one document where the key username is "dwight", and retrieve only the key named email.
A: db.users.findOne ( { "username" : "dwight" } , { "_id" : false , "email" : true } );


Write a query that retrieves documents from a users collection where the name has a "q" in it, and the document has an email field.
A: db.users.find({ name : { $regex : "q" }, email : { $exists: true } } );


How would you find all documents in the scores collection where the score is less than 50 or greater than 90?
A: db.scores.find({$or: [{score : {$lt : 50}}, {score : {$gt : 90}}]});


Recall the documents in the scores collection:
{
	"_id" : ObjectId("50844162cb4cf4564b4694f8"),
	"student" : 0,
	"type" : "exam",
	"score" : 75
}
Write a query that retrieves exam documents, sorted by score in descending order, skipping the first 50 and showing only the next 20.


Suppose a simple e-commerce product catalog called catalog with documents that look like this:
{ product : "Super Duper-o-phonic", 
  price : 100000000000,
  reviews : [ { user : "fred", comment : "Great!" , rating : 5 },
              { user : "tom" , comment : "I agree with Fred, somewhat!" , rating : 4 } ],
  ... }
Write a query that finds all products that cost more than 10,000 and that have a rating of 5 or better.
A: db.catalog.find( { price : { $gt : 10000 } , "reviews.rating" : { $gte : 5 } } );


Recall the documents in the scores collection:
{
	"_id" : ObjectId("50844162cb4cf4564b4694f8"),
	"student" : 0,
	"type" : "exam",
	"score" : 75
}
Write a query that retrieves exam documents, sorted by score in descending order, skipping the first 50 and showing only the next 20.
A: db.scores.find( { type : "exam" } ).sort( { score : -1 } ).skip(50).limit(20)


Calculate where type is 'essay' and score is greater than 90
db.scores.count({type : 'essay', score : {$gt : 90}});









